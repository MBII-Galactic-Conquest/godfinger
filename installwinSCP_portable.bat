@echo off
setlocal EnableDelayedExpansion

:: !! !! !! !! !! !! :: :: :: !! !! !! !! !! !! !! !! ::
:: !! !! !! !! !! !! :: :: :: !! !! !! !! !! !! !! !! ::

:: DO NOT RUN IF YOU DO NOT INTEND TO INSTALL WINSCP  ::

:: !! !! !! !! !! !! :: :: :: !! !! !! !! !! !! !! !! ::
:: !! !! !! !! !! !! :: :: :: !! !! !! !! !! !! !! !! ::

:: ========================================= ::

set /p confirm="Do you wish to install a portable version of WinSCP in your virtual environment? (8MB archived, 25MB extracted) (Y/N): "
if /i "%confirm%" neq "Y" (
    echo Operation cancelled. Portable WinSCP aborted...
    exit /b
)

REM Create a log file to capture all output for debugging
set LOG_FILE=%CD%\installwinSCP_portable_log.log
echo Script started at %DATE% %TIME% > "%LOG_FILE%"
echo. >> "%LOG_FILE%"

REM Redirect all subsequent output to the log file
REM This will make all 'echo' and command outputs go to the log file
REM Any output that needs to be seen on screen should be done before this.
call :main_installation_logic >> "%LOG_FILE%" 2>&1

echo.
echo WinSCP Portable installation script finished.
echo Check "%LOG_FILE%" for detailed output.
echo.

endlocal
goto :eof

:main_installation_logic
REM --- Configuration ---
SET "WINSCP_URL=https://sourceforge.net/projects/winscp/files/WinSCP/6.5.1/WinSCP-6.5.1-Portable.zip/download"
SET "WINSCP_ZIP_FILENAME=WinSCP-6.5.1-Portable.zip"
SET "TARGET_DIR=venv\portable_WinSCP"
SET "SYNC_SCRIPT_NAME=winscp_sync_gamedata.bat"
SET "SYNC_SCRIPT_PATH=%TARGET_DIR%\%SYNC_SCRIPT_NAME%"

echo.
echo --- WinSCP Portable Installation ---
echo.

REM Create the target directory if it doesn't exist
echo Checking/Creating target directory: %TARGET_DIR%
if exist "%TARGET_DIR%\" (
    echo Directory "%TARGET_DIR%" already exists. Skipping creation.
) else (
    mkdir "%TARGET_DIR%"
    if %errorlevel% neq 0 (
        echo ERROR: Failed to create directory "%TARGET_DIR%". Exiting.
        exit /b 1
    ) else (
        echo Directory "%TARGET_DIR%" created successfully.
    )
)

REM Navigate to the target directory for easier extraction
pushd "%TARGET_DIR%"
if %errorlevel% neq 0 (
    echo ERROR: Failed to navigate to "%TARGET_DIR%". Exiting.
    exit /b 1
)

REM Download the WinSCP Portable ZIP file
echo Downloading WinSCP Portable...
echo This might take a moment.
curl -L --ssl-no-revoke -o "%WINSCP_ZIP_FILENAME%" "%WINSCP_URL%"
if %errorlevel% neq 0 (
    echo ERROR: Failed to download %WINSCP_ZIP_FILENAME%.
    popd
    exit /b 1
)
echo Download complete.

REM Extract the ZIP file
echo Extracting %WINSCP_ZIP_FILENAME% to current directory...
REM Using 'tar' which is built-in on Windows 10+ for .zip extraction
tar -xf "%WINSCP_ZIP_FILENAME%"
if %errorlevel% neq 0 (
    echo ERROR: Failed to extract %WINSCP_ZIP_FILENAME%.
    popd
    exit /b 1
)
echo Extraction complete.

REM Clean up the downloaded ZIP file
echo Cleaning up downloaded ZIP file...
del "%WINSCP_ZIP_FILENAME%"
if %errorlevel% neq 0 (
    echo WARNING: Failed to delete %WINSCP_ZIP_FILENAME%. Please delete it manually.
) else (
    echo Cleanup complete.
)

REM --- Generate winscp_sync_gamedata.bat within portable_WinSCP ---
echo.
echo Generating %SYNC_SCRIPT_NAME% inside %TARGET_DIR%...

REM Get the line numbers for the start and end markers of the sync script content
for /f "tokens=1 delims=:" %%n in ('findstr /n /c:"::START_SYNC_SCRIPT_CONTENT" "%~f0"') do set "StartLine=%%n"
for /f "tokens=1 delims=:" %%n in ('findstr /n /c:"::END_SYNC_SCRIPT_CONTENT" "%~f0"') do set "EndLine=%%n"

REM Calculate the number of lines to skip (StartLine itself)
set /a "SkipLines=%StartLine%"

REM Pipe the content from StartLine+1 to EndLine-1 directly to the new sync script file
REM This uses 'more' to skip lines and 'findstr' to filter out the end marker.
REM This is the most robust way to copy a literal block of text in batch without temp files.
(
    more +%SkipLines% "%~f0" | findstr /v /c:"::END_SYNC_SCRIPT_CONTENT"
) > "%SYNC_SCRIPT_NAME%"

echo %SYNC_SCRIPT_NAME% generated at %CD%\%SYNC_SCRIPT_NAME%
echo.

REM Navigate back to the original directory
popd

echo.
echo WinSCP Portable has been successfully installed to: %CD%\%TARGET_DIR%
echo.
echo You can run WinSCP from: %CD%\%TARGET_DIR%\WinSCP.exe
echo.
echo The synchronization script is located at: %CD%\%TARGET_DIR%\%SYNC_SCRIPT_NAME%
echo.

exit /b 0

REM The actual content of the generated script starts here
::START_SYNC_SCRIPT_CONTENT
@echo off
setlocal

:: !! !! !! !! !! !! :: :: :: :: !! !! !! !! !! !! !! ::
:: !! !! !! !! !! !! :: :: :: :: !! !! !! !! !! !! !! ::

:: This script is generated by install_winscp_portable.bat
:: It is intended to be run from godfinger/venv/portable_WinSCP/

:: !! !! !! !! !! !! :: :: :: :: !! !! !! !! !! !! !! ::
:: !! !! !! !! !! !! :: :: :: :: !! !! !! !! !! !! !! ::

:: ========================================= ::

REM --- Configuration ---
SET "FTP_HOST=your_ftp_host.com"
SET "FTP_USER=your_ftp_username"
SET "FTP_PASS=your_ftp_password"
SET "REMOTE_FTP_PATH=/path/on/ftp/server/to/files" REM Example: /gamedata/

REM Path to WinSCP executable (it's in the same directory as this script)
SET "WINSCP_EXE=WinSCP.exe"

REM Local target path (relative to godfinger/venv/portable_WinSCP/)
REM ..\..\..\ means:
REM 1. ..\ (go up to venv/)
REM 2. ..\ (go up to godfinger/)
REM 3. ..\ (go up to gamedata/)
SET "LOCAL_TARGET_PATH=..\..\..\." REM Corrected path for gamedata parent directory

REM Temporary script file for WinSCP commands (in the same directory)
SET "WINSCP_SCRIPT_FILE=winscp_sync_temp_script.txt"

REM Log file for this script's output (in the same directory)
SET "LOG_FILE=winscp_sync_log.log" REM Use relative path since we'll be in portable_WinSCP

REM --- Script Logic ---

type nul > "%LOG_FILE%"
echo Script started at %DATE% %TIME% >> "%LOG_FILE%"
echo. >> "%LOG_FILE%"

echo.
echo --- WinSCP Gamedata Synchronization ---
echo.

REM Check if WinSCP executable exists
if not exist "%WINSCP_EXE%" (
    echo ERROR: WinSCP executable not found at "%WINSCP_EXE%".
    echo Please ensure WinSCP Portable is correctly placed.
    echo ERROR: WinSCP executable not found at "%WINSCP_EXE%". >> "%LOG_FILE%"
    goto :eof
)

REM Create the local target directory if it doesn't exist
echo Checking/Creating local target directory: "%LOCAL_TARGET_PATH%"
if not exist "%LOCAL_TARGET_PATH%\" (
    mkdir "%LOCAL_TARGET_PATH%"
    if %errorlevel% neq 0 (
        echo ERROR: Failed to create local directory "%LOCAL_TARGET_PATH%". Exiting.
        echo ERROR: Failed to create local directory "%LOCAL_TARGET_PATH%". >> "%LOG_FILE%"
        goto :eof
    ) else (
        echo Directory "%LOCAL_TARGET_PATH%" created successfully.
    )
) else (
    echo Directory "%LOCAL_TARGET_PATH%" already exists.
)

REM Generate the WinSCP script commands
echo Generating WinSCP script file: "%WINSCP_SCRIPT_FILE%"
(
    echo option batch abort
    echo option confirm off
    echo open ftp://%FTP_USER%:%FTP_PASS%@%FTP_HOST%
    echo synchronize local -criteria=neweronly -resumesupport=on -nopermissions "%LOCAL_TARGET_PATH%" "%REMOTE_FTP_PATH%"
    echo exit
) > "%WINSCP_SCRIPT_FILE%"
echo WinSCP script generated.

REM Execute WinSCP with the generated script
echo Running WinSCP synchronization...
"%WINSCP_EXE%" /script="%WINSCP_SCRIPT_FILE%" /log="%LOG_FILE%" /loglevel=1
if %errorlevel% neq 0 (
    echo ERROR: WinSCP synchronization failed. Check "%LOG_FILE%" for details.
    echo ERROR: WinSCP synchronization failed. >> "%LOG_FILE%"
) else (
    echo WinSCP synchronization completed successfully.
)

REM Clean up the temporary script file
echo Cleaning up temporary script file: "%WINSCP_SCRIPT_FILE%"
del "%WINSCP_SCRIPT_FILE%" >nul 2>&1
if %errorlevel% neq 0 (
    echo WARNING: Failed to delete temporary script file. Please delete it manually.
    echo WARNING: Failed to delete temporary script file. >> "%LOG_FILE%"
) else (
    echo Cleanup complete.
)

echo.
echo WinSCP synchronization script finished.
echo Check "%LOG_FILE%" for detailed output.
echo.

endlocal
::END_SYNC_SCRIPT_CONTENT